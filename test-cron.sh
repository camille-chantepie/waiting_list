#!/bin/bash

# Script de test pour le cron job de pr√©l√®vement mensuel
# Usage: ./test-cron.sh [local|production]

set -e

CRON_SECRET="QXVIvvzSksen39iqr2SXwfEyTXjyBDF+9xsK2HQhlWA="

# Couleurs pour le terminal
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

echo -e "${YELLOW}üß™ Test du Cron Job - Pr√©l√®vements Mensuels${NC}\n"

# D√©terminer l'environnement
ENV=${1:-local}

if [ "$ENV" == "local" ]; then
    URL="http://localhost:3000"
    echo -e "${YELLOW}üìç Environnement : LOCAL${NC}"
    echo -e "${YELLOW}üîó URL : $URL${NC}\n"
elif [ "$ENV" == "production" ]; then
    read -p "Entrez l'URL de production (ex: https://akademos.vercel.app): " PROD_URL
    URL=$PROD_URL
    echo -e "${YELLOW}üìç Environnement : PRODUCTION${NC}"
    echo -e "${YELLOW}üîó URL : $URL${NC}\n"
else
    echo -e "${RED}‚ùå Usage: ./test-cron.sh [local|production]${NC}"
    exit 1
fi

# Test 1 : V√©rification de l'authentification (sans token)
echo -e "${YELLOW}Test 1: V√©rification authentification (devrait √©chouer)${NC}"
response=$(curl -s -w "\n%{http_code}" -X POST "$URL/api/stripe/monthly-charge" \
    -H "Content-Type: application/json")

http_code=$(echo "$response" | tail -n1)
if [ "$http_code" == "401" ]; then
    echo -e "${GREEN}‚úÖ L'authentification est bien requise${NC}\n"
else
    echo -e "${RED}‚ùå Erreur : Devrait retourner 401, mais retourne $http_code${NC}\n"
fi

# Test 2 : Appel avec le token correct
echo -e "${YELLOW}Test 2: Ex√©cution du pr√©l√®vement mensuel${NC}"
response=$(curl -s -w "\n%{http_code}" -X POST "$URL/api/stripe/monthly-charge" \
    -H "Authorization: Bearer $CRON_SECRET" \
    -H "Content-Type: application/json")

http_code=$(echo "$response" | tail -n1)
body=$(echo "$response" | head -n-1)

if [ "$http_code" == "200" ]; then
    echo -e "${GREEN}‚úÖ Pr√©l√®vement effectu√© avec succ√®s${NC}"
    echo -e "${GREEN}üìä R√©ponse :${NC}"
    echo "$body" | jq '.' 2>/dev/null || echo "$body"
    echo ""
else
    echo -e "${RED}‚ùå Erreur HTTP $http_code${NC}"
    echo "$body"
    echo ""
fi

# Test 3 : V√©rification d'un utilisateur sp√©cifique (si fourni)
read -p "Voulez-vous v√©rifier un utilisateur sp√©cifique ? (ID utilisateur ou N pour ignorer): " USER_ID

if [ "$USER_ID" != "N" ] && [ "$USER_ID" != "n" ] && [ "$USER_ID" != "" ]; then
    echo -e "\n${YELLOW}Test 3: V√©rification de l'utilisateur $USER_ID${NC}"
    response=$(curl -s -w "\n%{http_code}" -X GET "$URL/api/stripe/monthly-charge?userId=$USER_ID")
    
    http_code=$(echo "$response" | tail -n1)
    body=$(echo "$response" | head -n-1)
    
    if [ "$http_code" == "200" ]; then
        echo -e "${GREEN}‚úÖ Donn√©es r√©cup√©r√©es${NC}"
        echo -e "${GREEN}üìä √âtat de l'abonnement :${NC}"
        echo "$body" | jq '.' 2>/dev/null || echo "$body"
        echo ""
    else
        echo -e "${RED}‚ùå Erreur HTTP $http_code${NC}"
        echo "$body"
        echo ""
    fi
fi

echo -e "${GREEN}‚úÖ Tests termin√©s !${NC}"
echo ""
echo -e "${YELLOW}üí° Prochaines √©tapes :${NC}"
echo "   1. V√©rifier les donn√©es dans Supabase"
echo "   2. Consulter les logs dans Vercel (si production)"
echo "   3. V√©rifier que les soldes ont bien √©t√© mis √† jour"
